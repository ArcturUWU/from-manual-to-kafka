{
  "name": "mongo-sink-universities",
  "config": {
    "connector.class": "com.mongodb.kafka.connect.MongoSinkConnector",
    "tasks.max": "1",
    "topics": "postgres_server.public.university,postgres_server.public.institute,postgres_server.public.department,postgres_server.public.specialty",
    "connection.uri": "mongodb://admin:secret@mongodb:27017",
    "database": "university_db",
    "collection": "universities",
    "key.converter": "org.apache.kafka.connect.json.JsonConverter",
    "key.converter.schemas.enable": "false",
    "value.converter": "org.apache.kafka.connect.json.JsonConverter",
    "value.converter.schemas.enable": "false",
    "transforms": "unwrap",
    "transforms.unwrap.type": "io.debezium.transforms.ExtractNewRecordState",
    "transforms.unwrap.drop.tombstones": "false",
    "behavior.on.null.values": "delete",
    "writemodel.strategy": "com.mongodb.kafka.connect.sink.writemodel.strategy.UpdateOneDefaultStrategy",
    "writemodel.filter.strategy": "com.mongodb.kafka.connect.sink.writemodel.filter.strategy.KafkaKeyStrategy",
    "update.one.insert.mode": "upsert",
    "topic.postgres_server.public.university.document.id.strategy": "com.mongodb.kafka.connect.sink.processor.id.strategy.PartialValueStrategy",
    "topic.postgres_server.public.university.document.id.strategy.partial.value.projection.type": "allowlist",
    "topic.postgres_server.public.university.document.id.strategy.partial.value.projection.list": "payload.after.id",
    "topic.postgres_server.public.university.writemodel.strategy": "com.mongodb.kafka.connect.sink.writemodel.strategy.UpdateOneBusinessKeyStrategy",
    "topic.postgres_server.public.institute.document.id.strategy": "com.mongodb.kafka.connect.sink.processor.id.strategy.PartialValueStrategy",
    "topic.postgres_server.public.institute.document.id.strategy.partial.value.projection.type": "allowlist",
    "topic.postgres_server.public.institute.document.id.strategy.partial.value.projection.list": "payload.after.university_id",
    "topic.postgres_server.public.institute.writemodel.strategy": "com.mongodb.kafka.connect.sink.writemodel.strategy.UpdateOneBusinessKeyFieldStrategy",
    "topic.postgres_server.public.institute.writemodel.update.field": "institutes",
    "topic.postgres_server.public.institute.writemodel.update.push": "payload.after",
    "topic.postgres_server.public.institute.writemodel.update.pull.filter": "{\"id\": \"${payload.before.id}\"}",
    "topic.postgres_server.public.department.document.id.strategy": "com.mongodb.kafka.connect.sink.processor.id.strategy.PartialValueStrategy",
    "topic.postgres_server.public.department.document.id.strategy.partial.value.projection.type": "allowlist",
    "topic.postgres_server.public.department.document.id.strategy.partial.value.projection.list": "payload.after.university_id",
    "topic.postgres_server.public.department.writemodel.strategy": "com.mongodb.kafka.connect.sink.writemodel.strategy.UpdateArrayFilterStrategy",
    "topic.postgres_server.public.department.writemodel.array.field": "institutes.$[inst].departments",
    "topic.postgres_server.public.department.writemodel.array.filter.identifier": "inst",
    "topic.postgres_server.public.department.writemodel.array.filter.condition": "{\"id\": \"${payload.after.institute_id}\"}",
    "topic.postgres_server.public.department.writemodel.update.push": "payload.after",
    "topic.postgres_server.public.department.writemodel.update.pull.filter": "{\"id\": \"${payload.before.id}\"}",
    "topic.postgres_server.public.specialty.document.id.strategy": "com.mongodb.kafka.connect.sink.processor.id.strategy.PartialValueStrategy",
    "topic.postgres_server.public.specialty.document.id.strategy.partial.value.projection.type": "allowlist",
    "topic.postgres_server.public.specialty.document.id.strategy.partial.value.projection.list": "payload.after.university_id",
    "topic.postgres_server.public.specialty.writemodel.strategy": "com.mongodb.kafka.connect.sink.writemodel.strategy.UpdateArrayFilterStrategy",
    "topic.postgres_server.public.specialty.writemodel.array.field": "institutes.$[inst].departments.$[dept].specializations",
    "topic.postgres_server.public.specialty.writemodel.array.filter.identifiers": "inst,dept",
    "topic.postgres_server.public.specialty.writemodel.array.filter.conditions": "{\"inst.id\":\"${payload.after.university_id}\"},{\"dept.id\":\"${payload.after.department_id}\"}",
    "topic.postgres_server.public.specialty.writemodel.update.push": "payload.after.name",
    "topic.postgres_server.public.specialty.writemodel.update.pull.filter": "{\"$eq\":\"${payload.before.name}\"}"
  }
}